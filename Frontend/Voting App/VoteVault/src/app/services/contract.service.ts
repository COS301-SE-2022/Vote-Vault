import { Injectable } from '@angular/core';
import {ContractFactory, ethers, providers} from 'ethers';

@Injectable({
  providedIn: 'root'
})
export class ContractService {

  private contractABI = '[{"constant":true,"inputs":[],"name":"startDate","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"name":"voteCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"endDate","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"voters","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"electionID","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"id","type":"string"},{"name":"sd","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"constant":false,"inputs":[{"name":"ballot","type":"uint256"},{"name":"candidate","type":"uint256"}],"name":"addVote","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getId","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"id","type":"string"}],"name":"updateId","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}]'
  private contractBytecode = '0x608060405234801561001057600080fd5b506040516107f83803806107f88339810180604052604081101561003357600080fd5b81019080805164010000000081111561004b57600080fd5b8281019050602081018481111561006157600080fd5b815185600182028301116401000000008211171561007e57600080fd5b50509291906020018051906020019092919050505081600190805190602001906100a99291906100b8565b5080600281905550505061015d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100f957805160ff1916838001178555610127565b82800160010185558215610127579182015b8281111561012657825182559160200191906001019061010b565b5b5090506101349190610138565b5090565b61015a91905b8082111561015657600081600090555060010161013e565b5090565b90565b61068c8061016c6000396000f3fe60806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630b97bc86146100935780635d1ca631146100be5780635ede13731461014e578063ba32941414610216578063c24a0f8b1461026f578063da58c7d91461029a578063f8e78e9a146102e9578063fcca991b14610379575b600080fd5b34801561009f57600080fd5b506100a86103be565b6040518082815260200191505060405180910390f35b3480156100ca57600080fd5b506100d36103c4565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101135780820151818401526020810190506100f8565b50505050905090810190601f1680156101405780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015a57600080fd5b506102146004803603602081101561017157600080fd5b810190808035906020019064010000000081111561018e57600080fd5b8201836020820111156101a057600080fd5b803590602001918460018302840111640100000000831117156101c257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610466565b005b34801561022257600080fd5b506102596004803603604081101561023957600080fd5b810190808035906020019092919080359060200190929190505050610480565b6040518082815260200191505060405180910390f35b34801561027b57600080fd5b506102846104b6565b6040518082815260200191505060405180910390f35b3480156102a657600080fd5b506102d3600480360360208110156102bd57600080fd5b81019080803590602001909291905050506104bc565b6040518082815260200191505060405180910390f35b3480156102f557600080fd5b506102fe6104df565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561033e578082015181840152602081019050610323565b50505050905090810190601f16801561036b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561038557600080fd5b506103bc6004803603604081101561039c57600080fd5b81019080803590602001909291908035906020019092919050505061057d565b005b60025481565b606060018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561045c5780601f106104315761010080835404028352916020019161045c565b820191906000526020600020905b81548152906001019060200180831161043f57829003601f168201915b5050505050905090565b806001908051906020019061047c9291906105bb565b5050565b60008281548110151561048f57fe5b9060005260206000209060030201816003811015156104aa57fe5b01600091509150505481565b60035481565b6004818154811015156104cb57fe5b906000526020600020016000915090505481565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105755780601f1061054a57610100808354040283529160200191610575565b820191906000526020600020905b81548152906001019060200180831161055857829003601f168201915b505050505081565b600160008381548110151561058e57fe5b9060005260206000209060030201826003811015156105a957fe5b01600082825401925050819055505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106105fc57805160ff191683800117855561062a565b8280016001018555821561062a579182015b8281111561062957825182559160200191906001019061060e565b5b509050610637919061063b565b5090565b61065d91905b80821115610659576000816000905550600101610641565b5090565b9056fea165627a7a723058200ae8a6e87b6af6738a487cbe9b52c6d0d289865029c647c5af3ce4c858d98d4c0029'
  private privateKey = '0x1bfdd10e791617c7e8e9c7d0a451b45f1fcf07c831504d8f2fa0727a2b166cd2'
  private alcProvider = null
  private signer = null

  constructor() {
    this.alcProvider = new ethers.providers.AlchemyProvider("goerli", "OvCjMEF-_qv95PPGX2i14JE1A-3nSIl8")

    this.signer = new ethers.Wallet(this.privateKey, this.alcProvider)

    // this.deploy()
  }

  //Deploys contract to blockchain and returns ID
  async deploy() : Promise<String> {
    console.log("Deploying...")
    const contractFactory = new ContractFactory(this.contractABI, this.contractBytecode, this.signer)
 
    const contract = await contractFactory.deploy("id", 99)

    await contract.deployed()
    console.log("Success! : ", await contract.address)

    return await contract.address
    // const electionID = await contract.electionID()
    // console.log("ID : " + electionID)
    // const startDate = await contract.startDate()
    // console.log("StartDate : " + startDate)
  }

  //Add a vote to the specified election, at specified indices
  async addVote(contractAddress, ballotIndex, candidateIndex) {
    const contract = new ethers.Contract(contractAddress, this.contractABI, this.alcProvider)

    //Call method

  }

  // async 


}
