import { Injectable } from '@angular/core';
import {ContractFactory, ethers, providers} from 'ethers';
import { DataService } from '../data.service';

@Injectable({
  providedIn: 'root'
})
export class ContractService {

  private contractABI = '[{"constant":true,"inputs":[],"name":"startDate","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"name":"voteCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"endDate","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"electionID","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"id","type":"string"},{"name":"sd","type":"uint256"},{"name":"ed","type":"uint256"},{"name":"numCandidates","type":"uint256[]"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"constant":false,"inputs":[{"name":"id","type":"string"},{"name":"age","type":"uint256"},{"name":"gender","type":"string"}],"name":"registerUser","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"id","type":"string"},{"name":"votes","type":"uint256[]"}],"name":"addVote","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getId","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"id","type":"string"}],"name":"updateId","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}]'
  private contractBytecode = ''
  private privateKey = '0x1bfdd10e791617c7e8e9c7d0a451b45f1fcf07c831504d8f2fa0727a2b166cd2'
  private alcProvider = null
  private signer = null

  constructor(private dataService : DataService) {
    this.alcProvider = new ethers.providers.AlchemyProvider("goerli", "OvCjMEF-_qv95PPGX2i14JE1A-3nSIl8")

    this.signer = new ethers.Wallet(this.privateKey, this.alcProvider)

    // this.deploy()
  }

  //Deploys contract to blockchain and returns ID
  async deploy(id, sd, ed, sizes) : Promise<String> {
    console.log("Deploying...")
    const contractFactory = new ContractFactory(this.contractABI, this.contractBytecode, this.signer)
 
    const contract = await contractFactory.deploy(id, sd, ed, sizes)

    await contract.deployed()
    console.log("Success! : ", await contract.address)

    return await contract.address
    // const electionID = await contract.electionID()
    // console.log("ID : " + electionID)
    // const startDate = await contract.startDate()
    // console.log("StartDate : " + startDate)
  }

  async addVoter(contractAddress, voter) {
    const contract = new ethers.Contract(contractAddress, this.contractABI, this.signer)

    try {
      const tx = await contract.registerUser(voter.IDnum, voter.Age, voter.Gender, {gasLimit : 250000})
      await tx.wait()
    }
    catch(error) {
      console.error(error)
    }
  }

  //Add a vote to the specified election, at specified indices
  async addVote(contractAddress, votes) {
    const contract = new ethers.Contract(contractAddress, this.contractABI, this.signer)

    //Call method
    try {
      const tx = await contract.addVote(this.dataService.voterId, votes, {gasLimit : 250000})
      await tx.wait()
    }
    catch(error) {
      console.error(error)
    }
  }

  // async 


}
